a. To create emp_id as the primary key and add indices on the employee table, you can use SQL commands like this:


-- Create the 'employee' table
CREATE TABLE employee (
    emp_id INT PRIMARY KEY,
    e_name VARCHAR(255),
    salary DECIMAL(10, 2),
    Date_of_Joining DATE,
    Dept_no INT,
    Designation VARCHAR(255)
);

-- Create the 'customer' table
CREATE TABLE customer (
    c_id INT PRIMARY KEY,
    c_name VARCHAR(255),
    email VARCHAR(255),
    city VARCHAR(255),
    pincode VARCHAR(10)
);

-- Create the 'order' table
CREATE TABLE order (
    order_id INT PRIMARY KEY,
    date DATE,
    amount DECIMAL(10, 2),
    cust_id INT,
    FOREIGN KEY (cust_id) REFERENCES customer(c_id)
);


CREATE INDEX idx_salary ON employee1(salary);
CREATE INDEX idx_Dept_no ON employee1(Dept_no);
This code creates the employee table with emp_id as the primary key and adds indices on the salary and Dept_no columns.

b. To create a user-defined index on any column, you can use the CREATE INDEX statement as shown in the previous answer. You can create an index on any column you like by replacing idx_column_name and column_name with your desired index name and column name.

c. To create a sequence using auto-increment, you can use an SQL command like this (syntax may vary depending on the database system you are using):


CREATE SEQUENCE order_id_sequence START WITH 1 INCREMENT BY 1;
This will create a sequence named order_id_sequence that starts at 1 and increments by 1 each time it is used. You can use this sequence to generate auto-incrementing values for a column, such as order_id in the Order table.

d. To truncate a table, you can use the TRUNCATE statement. For example, if you want to truncate the Order table:


TRUNCATE TABLE Order1;
This will remove all rows from the Order table while keeping the table structure intact.

e. To find the list of customers who placed orders and the details of their orders, you can use a SQL query with a JOIN:


SELECT c.c_id, c.c_name, o.order_id, o.dates, o.amount
FROM Customer c
INNER JOIN Order1 o ON c.c_id = o.cust_id;
This query will retrieve the customer ID, customer name, order ID, order date, and order amount for customers who have placed orders.

f. To find customer information and append order details to a table, you can use the INSERT INTO ... SELECT statement. Assuming you want to append the order details to a new table:


CREATE TABLE CustomerOrderInfo AS
SELECT c.c_id, c.c_name, o.order_id, o.dates, o.amount
FROM Customer1 c
INNER JOIN Order1 o ON c.c_id = o.cust_id;
This code will create a new table named CustomerOrderInfo and populate it with the customer information and order details.

g. To list down customers who haven't placed an order, you can use a SQL query like this:


SELECT c.c_id, c.c_name
FROM Customer1 c
LEFT JOIN Order1 o ON c.c_id = o.cust_id
WHERE o.cust_id IS NULL;
This query uses a LEFT JOIN to retrieve customers who do not have corresponding orders (where o.cust_id is NULL), indicating that they haven't placed an order.
